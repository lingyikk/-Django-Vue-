"""
Django settings for serve project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import datetime
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-$_e!1m@rl7dpcy*%#ez4#t6c4c)wdk!9_=kpo3ffq=y2i0bljv'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app.apps.AppConfig',
    # 注册drf
    'rest_framework',
    # 注册drf过滤器
    'django_filters',
    # 注册接口文档
    'coreapi',
    # 跨域的支持(库)
    'corsheaders',
    # jwt鉴权 - 实现jwt方式认证机制
    # 'rest_framework_simplejwt',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 跨域的支持
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'serve.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'serve.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'wgstourism',  # 数据库名字
        'USER': 'root',
        'PASSWORD': '123456789yj',
        'HOST': '127.0.0.1',  # 那台机器安装了MySQL
        'PORT': 3306,
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# drf的配置（全局配置）
REST_FRAMEWORK = {
    # 默认的权限认证配置
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 登录认证全局配置:选择认证方式
        # 'rest_framework.authentication.BasicAuthentication',  # Basic认证
        # 'rest_framework.authentication.SessionAuthentication',  # session认证
        # DRF配置鉴权方式 -》 配置登录鉴权方式
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),

    # 在配置文件中设置默认的权限管理类
    # 'DEFAULT_PERMISSION_CLASSES': (
    #     'rest_framework.permissions.IsAuthenticated',
    # ),

    # 配置过滤器
    'DEFAULT_FILTER_BACKENDS':
        (
            # 这个是指定使用django_filters中的过滤器来进行过滤
            'django_filters.rest_framework.DjangoFilterBackend',
            # 这个是指定使用DRF自带的排序过滤器来进行数据排序
            'rest_framework.filters.OrderingFilter'
        ),

    # 使用coreapi自动输出接口文档配置
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',

    # 分页器
    # 'DEFAULT_PAGINATION_CLASS':
    #     'rest_framework.pagination.PageNumberPagination',
    #     'PAGE_SIZE': 10  # 每页数据量
}

# 图片上传 -> Django原生
# 指定文件上传存放的路径
MEDIA_ROOT = BASE_DIR / 'file/image'
# 指定文件的获取的url路径
MEDIA_URL = ''


# 跨域的支持
# 凡是出现在白名单中的域名，都可以访问后端接口
CORS_ORIGIN_WHITELIST = (
    # 'http://127.0.0.1:8088',
    'http://localhost:8080',
    'http://127.0.0.1:5173'
)

# 允许所有用户跨域访问
CORS_ORIGIN_ALLOW_ALL = True
# CORS_ALLOW_CREDENTIALS 指明在跨域访问中，后端是否支持对cookie的操作。因为我们后续会使用DRF JWT，所以不使用cookie
CORS_ALLOW_CREDENTIALS = True

# 1、浏览器会第一次先发送options请求询问后端是否允许跨域
# 2、后端在响应结果中告知浏览器允许跨域，允许的情况下浏览器再发送跨域请求

# JWT鉴权配置
# from datetime import timedelta
#
# SIMPLE_JWT = {
#     "ACCESS_TOKEN_LIFETIME": "timedelta(seconds=99999)",  # token的有效期，默认五分钟
#     "REFRESH_TOKEN_LIFETIME": timedelta(days=365),  # 刷新令牌的有效时间
#     "ROTATE_REFRESH_TOKENS": False,  # 若为True，则刷新后新的refresh_token有更新的有 效时间
#     "BLACKLIST_AFTER_ROTATION": True,  # 若为True，刷新后的token将添加到黑名单中,
#     "ALGORITHM": "HS256",  # 对称算法：HS256 HS384 HS512 非对称算法：RSA
#     "SIGNING_KEY": SECRET_KEY,
#     "VERIFYING_KEY": None,  # if signing_key, verifying_key will be ignore.
#     "AUDIENCE": None,
#     "ISSUER": None,
#     'USER_AUTHENTICATION_RULE':
#         'rest_framework_simplejwt.authentication.default_user_authentication_rule',
#     "AUTH_HEADER_TYPES": ("Bearer",),  # Authorization: Bearer <token>
#     "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",  # if HTTP_X_ACCESS_TOKEN,X_ACCESS_TOKEN: Bearer <token>
#     "USER_ID_FIELD": "id",  # 使用唯一不变的数据库字段,将包含在生成的令牌中以标识用户
#     "USER_ID_CLAIM": "user_id",
# }

# 将时区设置为你所在的地区
# TIME_ZONE = 'Asia/Shanghai'
# USE_TZ = True
